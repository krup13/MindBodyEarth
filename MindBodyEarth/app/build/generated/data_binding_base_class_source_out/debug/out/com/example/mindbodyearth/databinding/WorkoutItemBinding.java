// Generated by view binder compiler. Do not edit!
package com.example.mindbodyearth.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mindbodyearth.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class WorkoutItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final CheckBox workoutCompleted;

  @NonNull
  public final CardView workoutItemCard;

  @NonNull
  public final LinearLayout workoutItemLayout;

  @NonNull
  public final TextView workoutName;

  @NonNull
  public final TextView workoutReps;

  @NonNull
  public final TextView workoutSets;

  @NonNull
  public final TextView workoutType;

  private WorkoutItemBinding(@NonNull CardView rootView, @NonNull Button deleteButton,
      @NonNull CheckBox workoutCompleted, @NonNull CardView workoutItemCard,
      @NonNull LinearLayout workoutItemLayout, @NonNull TextView workoutName,
      @NonNull TextView workoutReps, @NonNull TextView workoutSets, @NonNull TextView workoutType) {
    this.rootView = rootView;
    this.deleteButton = deleteButton;
    this.workoutCompleted = workoutCompleted;
    this.workoutItemCard = workoutItemCard;
    this.workoutItemLayout = workoutItemLayout;
    this.workoutName = workoutName;
    this.workoutReps = workoutReps;
    this.workoutSets = workoutSets;
    this.workoutType = workoutType;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static WorkoutItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static WorkoutItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.workout_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static WorkoutItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.delete_button;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.workout_completed;
      CheckBox workoutCompleted = ViewBindings.findChildViewById(rootView, id);
      if (workoutCompleted == null) {
        break missingId;
      }

      CardView workoutItemCard = (CardView) rootView;

      id = R.id.workout_item_layout;
      LinearLayout workoutItemLayout = ViewBindings.findChildViewById(rootView, id);
      if (workoutItemLayout == null) {
        break missingId;
      }

      id = R.id.workout_name;
      TextView workoutName = ViewBindings.findChildViewById(rootView, id);
      if (workoutName == null) {
        break missingId;
      }

      id = R.id.workout_reps;
      TextView workoutReps = ViewBindings.findChildViewById(rootView, id);
      if (workoutReps == null) {
        break missingId;
      }

      id = R.id.workout_sets;
      TextView workoutSets = ViewBindings.findChildViewById(rootView, id);
      if (workoutSets == null) {
        break missingId;
      }

      id = R.id.workout_type;
      TextView workoutType = ViewBindings.findChildViewById(rootView, id);
      if (workoutType == null) {
        break missingId;
      }

      return new WorkoutItemBinding((CardView) rootView, deleteButton, workoutCompleted,
          workoutItemCard, workoutItemLayout, workoutName, workoutReps, workoutSets, workoutType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
